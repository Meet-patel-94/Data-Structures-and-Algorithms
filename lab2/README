Suppose that towers(5, 2, 3) is invoked.

1.      How will the first recursive call to towers() be invoked? Answer this question in the form: towers(x, y, z) where you give the actual values to the three parameters.

2.      How many recursive calls to towers() will be made before this first recursive call actually returns to the initial invocation?

3.      Once towers(5, 2, 3) has invoked its first recursive call to towers() and this invocation has returned, what will be printed to stdout? (i.e. What actual move will be made by towers(5, 2, 3) ?)

4.      How will the second recursive call to towers() be invoked? Answer this question in the form: towers(x, y, z) where you give the actual values to the three parameters. 


Answers:

1. The first recursive call to towers() be invoed is towers(4, 2, 1).

2. It will call the towers 31 (2^5-1) times from towers (5,2,3) before the first recursive call actually returns the initial invocation.

3. After towers(5,2,3) has been invoked to the first recursive call to towers() the printed stdout will be 2 3.
    
4. The second recursive call to towers()  will be towers(3,2,3).


Question:

Suppose that towers(8, 1, 2) is invoked. How many lines will be printed to stdout? 


Answer: 

255 lines will be printed to the stdout for the towers(8,1,2).


Requirement 2 When Code is to be changed:

There has to be atleast 1 disk for this program to compile because a disk cannot be negative.  
if (n<1)

Requirement 2b When Code is to be changed:

You cannot move the disk from towers 1 2 or 3 not another given values and both from and dest should not be equal to each other.
if ((dest>3)||(dest<1)||(dest==from)||(from>3)||(from<2));
      

